/*
 * Math Operations API
 *
 * A REST API that performs a math operation on two numeric values based on an operation type provided in the HTTP header. Requires JWT authentication.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Calculator.Attributes;
using Calculator.Models;
using Calculator.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace Calculator.Controllers
{
    /// <summary>
    /// Controller for performing math operations between two numbers.
    /// </summary>
    [ApiController]
    public class MathController : ControllerBase, IMathController
    {
        private readonly ICalculatorService _calculator;

        /// <summary>
        /// Constructor injecting the calculator service.
        /// </summary>
        /// <param name="calculator">The calculator service instance.</param>
        public MathController(ICalculatorService calculator)
        {
            _calculator = calculator;
        }

        /// <summary>
        /// Perform a math operation on two numbers
        /// </summary>
        /// <param name="request">The request containing two numbers.</param>
        /// <param name="operation">The type of operation to perform (add, subtract, multiply, divide).</param>
        /// <response code="200">Successful result of the math operation</response>
        /// <response code="400">Bad request (e.g., unsupported operation or division by zero)</response>
        /// <response code="401">Unauthorized (missing or invalid JWT)</response>
        [HttpPost]
        [Route("calculate")]
        [Authorize()]
        [ValidateModelState]
        [SwaggerOperation("Calculate")]
        [SwaggerResponse(statusCode: 200, type: typeof(MathResponse), description: "Successful result of the math operation")]
        public virtual IActionResult Calculate([FromBody]MathRequest request, [FromHeader][Required()]string operation)
        {
            try
            {
                var result = _calculator.Calculate(request.Number1.GetValueOrDefault(), request.Number2.GetValueOrDefault(), operation);

                return Ok(new MathResponse { Result = result });
            }
            catch (DivideByZeroException ex)
            {
                return BadRequest(new { error = ex.Message });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { error = ex.Message });
            }
            catch (Exception)
            {
                return StatusCode(500, new { error = "An unexpected error occurred." });
            }
        }
    }
}
